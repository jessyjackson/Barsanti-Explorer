/* tslint:disable */
/* eslint-disable */
/**
 * BarsantiExplorer
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AcceptCommentRequest
 */
export interface AcceptCommentRequest {
    /**
     * 
     * @type {CommentStatus}
     * @memberof AcceptCommentRequest
     */
    'status': CommentStatus;
}


/**
 * 
 * @export
 * @interface Comment
 */
export interface Comment {
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'author'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Comment
     */
    'text'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    'rating'?: number;
    /**
     * 
     * @type {CommentStatus}
     * @memberof Comment
     */
    'status'?: CommentStatus;
    /**
     * 
     * @type {number}
     * @memberof Comment
     */
    'tripId'?: number;
    /**
     * 
     * @type {Trip}
     * @memberof Comment
     */
    'trip'?: Trip;
}


/**
 * 
 * @export
 * @interface CommentResponse
 */
export interface CommentResponse {
    /**
     * 
     * @type {string}
     * @memberof CommentResponse
     */
    'author'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CommentResponse
     */
    'text'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof CommentResponse
     */
    'rating'?: number;
    /**
     * 
     * @type {Trip}
     * @memberof CommentResponse
     */
    'trip'?: Trip;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const CommentStatus = {
    NUMBER_0: 0,
    NUMBER_1: 1,
    NUMBER_2: 2
} as const;

export type CommentStatus = typeof CommentStatus[keyof typeof CommentStatus];


/**
 * 
 * @export
 * @interface CreateCommentRequest
 */
export interface CreateCommentRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateCommentRequest
     */
    'author': string;
    /**
     * 
     * @type {string}
     * @memberof CreateCommentRequest
     */
    'text': string;
    /**
     * 
     * @type {number}
     * @memberof CreateCommentRequest
     */
    'rating': number;
    /**
     * 
     * @type {number}
     * @memberof CreateCommentRequest
     */
    'tripId'?: number;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface LoginResponse
 */
export interface LoginResponse {
    /**
     * 
     * @type {UserResponse}
     * @memberof LoginResponse
     */
    'user'?: UserResponse;
    /**
     * 
     * @type {string}
     * @memberof LoginResponse
     */
    'token'?: string | null;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface TelegramSetIdRequest
 */
export interface TelegramSetIdRequest {
    /**
     * 
     * @type {number}
     * @memberof TelegramSetIdRequest
     */
    'telegramId'?: number | null;
}
/**
 * 
 * @export
 * @interface TelegramSetIdResponse
 */
export interface TelegramSetIdResponse {
    /**
     * 
     * @type {boolean}
     * @memberof TelegramSetIdResponse
     */
    'success'?: boolean;
}
/**
 * 
 * @export
 * @interface Trip
 */
export interface Trip {
    /**
     * 
     * @type {number}
     * @memberof Trip
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'address'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Trip
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof Trip
     */
    'longitude'?: number;
    /**
     * 
     * @type {string}
     * @memberof Trip
     */
    'geoHash'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof Trip
     */
    'ratingsNumber'?: number;
    /**
     * 
     * @type {number}
     * @memberof Trip
     */
    'totalRating'?: number;
    /**
     * 
     * @type {number}
     * @memberof Trip
     */
    'averageRating'?: number;
    /**
     * 
     * @type {number}
     * @memberof Trip
     */
    'typeId'?: number;
    /**
     * 
     * @type {TripType}
     * @memberof Trip
     */
    'tripType'?: TripType;
    /**
     * 
     * @type {Array<Comment>}
     * @memberof Trip
     */
    'comments'?: Array<Comment> | null;
}
/**
 * 
 * @export
 * @interface TripResponse
 */
export interface TripResponse {
    /**
     * 
     * @type {number}
     * @memberof TripResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TripResponse
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TripResponse
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TripResponse
     */
    'title'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TripResponse
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TripResponse
     */
    'image'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TripResponse
     */
    'address'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof TripResponse
     */
    'latitude'?: number;
    /**
     * 
     * @type {number}
     * @memberof TripResponse
     */
    'longitude'?: number;
    /**
     * 
     * @type {string}
     * @memberof TripResponse
     */
    'geoHash'?: string | null;
    /**
     * 
     * @type {TripType}
     * @memberof TripResponse
     */
    'tripType'?: TripType;
    /**
     * 
     * @type {number}
     * @memberof TripResponse
     */
    'averageRating'?: number;
}
/**
 * 
 * @export
 * @interface TripType
 */
export interface TripType {
    /**
     * 
     * @type {number}
     * @memberof TripType
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TripType
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof TripType
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TripType
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface TripTypeResponse
 */
export interface TripTypeResponse {
    /**
     * 
     * @type {number}
     * @memberof TripTypeResponse
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof TripTypeResponse
     */
    'name'?: string | null;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    'email'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    'telegramId'?: number | null;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (loginRequest?: LoginRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authMeGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Set user telegram id
         * @param {TelegramSetIdRequest} [telegramSetIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTelegramPost: async (telegramSetIdRequest?: TelegramSetIdRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/auth/telegram`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(telegramSetIdRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(loginRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authLoginPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authMeGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authMeGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authMeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Set user telegram id
         * @param {TelegramSetIdRequest} [telegramSetIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authTelegramPost(telegramSetIdRequest?: TelegramSetIdRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TelegramSetIdResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authTelegramPost(telegramSetIdRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['AuthApi.authTelegramPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @summary Login
         * @param {LoginRequest} [loginRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(loginRequest?: LoginRequest, options?: any): AxiosPromise<LoginResponse> {
            return localVarFp.authLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get current user
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authMeGet(options?: any): AxiosPromise<UserResponse> {
            return localVarFp.authMeGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Set user telegram id
         * @param {TelegramSetIdRequest} [telegramSetIdRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authTelegramPost(telegramSetIdRequest?: TelegramSetIdRequest, options?: any): AxiosPromise<TelegramSetIdResponse> {
            return localVarFp.authTelegramPost(telegramSetIdRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @summary Login
     * @param {LoginRequest} [loginRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authLoginPost(loginRequest?: LoginRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get current user
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authMeGet(options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authMeGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Set user telegram id
     * @param {TelegramSetIdRequest} [telegramSetIdRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public authTelegramPost(telegramSetIdRequest?: TelegramSetIdRequest, options?: RawAxiosRequestConfig) {
        return AuthApiFp(this.configuration).authTelegramPost(telegramSetIdRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * CommentsApi - axios parameter creator
 * @export
 */
export const CommentsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get filtered comments
         * @param {number} [tripId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommentsGet: async (tripId?: number, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tripId !== undefined) {
                localVarQueryParameter['TripId'] = tripId;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommentsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCommentsIdDelete', 'id', id)
            const localVarPath = `/api/comments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommentsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCommentsIdGet', 'id', id)
            const localVarPath = `/api/comments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} id 
         * @param {AcceptCommentRequest} [acceptCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommentsIdPost: async (id: number, acceptCommentRequest?: AcceptCommentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiCommentsIdPost', 'id', id)
            const localVarPath = `/api/comments/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(acceptCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new comment
         * @param {CreateCommentRequest} [createCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommentsPost: async (createCommentRequest?: CreateCommentRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/comments`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createCommentRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommentsApi - functional programming interface
 * @export
 */
export const CommentsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CommentsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get filtered comments
         * @param {number} [tripId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCommentsGet(tripId?: number, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Comment>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCommentsGet(tripId, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.apiCommentsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCommentsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCommentsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.apiCommentsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCommentsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCommentsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.apiCommentsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {number} id 
         * @param {AcceptCommentRequest} [acceptCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCommentsIdPost(id: number, acceptCommentRequest?: AcceptCommentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCommentsIdPost(id, acceptCommentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.apiCommentsIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new comment
         * @param {CreateCommentRequest} [createCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiCommentsPost(createCommentRequest?: CreateCommentRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CommentResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiCommentsPost(createCommentRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['CommentsApi.apiCommentsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * CommentsApi - factory interface
 * @export
 */
export const CommentsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CommentsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get filtered comments
         * @param {number} [tripId] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommentsGet(tripId?: number, page?: number, limit?: number, options?: any): AxiosPromise<Array<Comment>> {
            return localVarFp.apiCommentsGet(tripId, page, limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommentsIdDelete(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiCommentsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a comment
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommentsIdGet(id: number, options?: any): AxiosPromise<CommentResponse> {
            return localVarFp.apiCommentsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} id 
         * @param {AcceptCommentRequest} [acceptCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommentsIdPost(id: number, acceptCommentRequest?: AcceptCommentRequest, options?: any): AxiosPromise<CommentResponse> {
            return localVarFp.apiCommentsIdPost(id, acceptCommentRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new comment
         * @param {CreateCommentRequest} [createCommentRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiCommentsPost(createCommentRequest?: CreateCommentRequest, options?: any): AxiosPromise<CommentResponse> {
            return localVarFp.apiCommentsPost(createCommentRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommentsApi - object-oriented interface
 * @export
 * @class CommentsApi
 * @extends {BaseAPI}
 */
export class CommentsApi extends BaseAPI {
    /**
     * 
     * @summary Get filtered comments
     * @param {number} [tripId] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public apiCommentsGet(tripId?: number, page?: number, limit?: number, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).apiCommentsGet(tripId, page, limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a comment
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public apiCommentsIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).apiCommentsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a comment
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public apiCommentsIdGet(id: number, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).apiCommentsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} id 
     * @param {AcceptCommentRequest} [acceptCommentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public apiCommentsIdPost(id: number, acceptCommentRequest?: AcceptCommentRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).apiCommentsIdPost(id, acceptCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new comment
     * @param {CreateCommentRequest} [createCommentRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommentsApi
     */
    public apiCommentsPost(createCommentRequest?: CreateCommentRequest, options?: RawAxiosRequestConfig) {
        return CommentsApiFp(this.configuration).apiCommentsPost(createCommentRequest, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TripTypesApi - axios parameter creator
 * @export
 */
export const TripTypesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get filtered trip-types
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripTypesGet: async (search?: string, sort?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/trip-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (search !== undefined) {
                localVarQueryParameter['Search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['Sort'] = sort;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a trip-type
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripTypesIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTripTypesIdGet', 'id', id)
            const localVarPath = `/api/trip-types/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripTypesPost: async (name: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiTripTypesPost', 'name', name)
            const localVarPath = `/api/trip-types`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TripTypesApi - functional programming interface
 * @export
 */
export const TripTypesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TripTypesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get filtered trip-types
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTripTypesGet(search?: string, sort?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TripType>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTripTypesGet(search, sort, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripTypesApi.apiTripTypesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a trip-type
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTripTypesIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTripTypesIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripTypesApi.apiTripTypesIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTripTypesPost(name: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripTypeResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTripTypesPost(name, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripTypesApi.apiTripTypesPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TripTypesApi - factory interface
 * @export
 */
export const TripTypesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TripTypesApiFp(configuration)
    return {
        /**
         * 
         * @summary Get filtered trip-types
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripTypesGet(search?: string, sort?: string, options?: any): AxiosPromise<Array<TripType>> {
            return localVarFp.apiTripTypesGet(search, sort, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a trip-type
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripTypesIdGet(id: number, options?: any): AxiosPromise<TripTypeResponse> {
            return localVarFp.apiTripTypesIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripTypesPost(name: string, options?: any): AxiosPromise<TripTypeResponse> {
            return localVarFp.apiTripTypesPost(name, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TripTypesApi - object-oriented interface
 * @export
 * @class TripTypesApi
 * @extends {BaseAPI}
 */
export class TripTypesApi extends BaseAPI {
    /**
     * 
     * @summary Get filtered trip-types
     * @param {string} [search] 
     * @param {string} [sort] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripTypesApi
     */
    public apiTripTypesGet(search?: string, sort?: string, options?: RawAxiosRequestConfig) {
        return TripTypesApiFp(this.configuration).apiTripTypesGet(search, sort, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a trip-type
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripTypesApi
     */
    public apiTripTypesIdGet(id: number, options?: RawAxiosRequestConfig) {
        return TripTypesApiFp(this.configuration).apiTripTypesIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripTypesApi
     */
    public apiTripTypesPost(name: string, options?: RawAxiosRequestConfig) {
        return TripTypesApiFp(this.configuration).apiTripTypesPost(name, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TripsApi - axios parameter creator
 * @export
 */
export const TripsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get filtered trips
         * @param {number} [tripType] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {string} [order] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {number} [geoHashPrecision] 
         * @param {boolean} [includeDeleted] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripsGet: async (tripType?: number, search?: string, sort?: string, order?: string, page?: number, limit?: number, latitude?: number, longitude?: number, geoHashPrecision?: number, includeDeleted?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/trips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (tripType !== undefined) {
                localVarQueryParameter['TripType'] = tripType;
            }

            if (search !== undefined) {
                localVarQueryParameter['Search'] = search;
            }

            if (sort !== undefined) {
                localVarQueryParameter['Sort'] = sort;
            }

            if (order !== undefined) {
                localVarQueryParameter['Order'] = order;
            }

            if (page !== undefined) {
                localVarQueryParameter['Page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['Limit'] = limit;
            }

            if (latitude !== undefined) {
                localVarQueryParameter['Latitude'] = latitude;
            }

            if (longitude !== undefined) {
                localVarQueryParameter['Longitude'] = longitude;
            }

            if (geoHashPrecision !== undefined) {
                localVarQueryParameter['GeoHashPrecision'] = geoHashPrecision;
            }

            if (includeDeleted !== undefined) {
                localVarQueryParameter['IncludeDeleted'] = includeDeleted;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete a trip
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripsIdDelete: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTripsIdDelete', 'id', id)
            const localVarPath = `/api/trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get a trip
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripsIdGet: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTripsIdGet', 'id', id)
            const localVarPath = `/api/trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update a trip
         * @param {number} id 
         * @param {File} [image] 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [address] 
         * @param {string} [latitude] 
         * @param {string} [longitude] 
         * @param {number} [typeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripsIdPut: async (id: number, image?: File, title?: string, description?: string, address?: string, latitude?: string, longitude?: string, typeId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiTripsIdPut', 'id', id)
            const localVarPath = `/api/trips/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (image !== undefined) { 
                localVarFormParams.append('Image', image as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('Title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }
    
            if (address !== undefined) { 
                localVarFormParams.append('Address', address as any);
            }
    
            if (latitude !== undefined) { 
                localVarFormParams.append('Latitude', latitude as any);
            }
    
            if (longitude !== undefined) { 
                localVarFormParams.append('Longitude', longitude as any);
            }
    
            if (typeId !== undefined) { 
                localVarFormParams.append('TypeId', typeId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new trip
         * @param {File} image 
         * @param {string} title 
         * @param {string} description 
         * @param {string} address 
         * @param {string} latitude 
         * @param {string} longitude 
         * @param {number} [typeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripsPost: async (image: File, title: string, description: string, address: string, latitude: string, longitude: string, typeId?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('apiTripsPost', 'image', image)
            // verify required parameter 'title' is not null or undefined
            assertParamExists('apiTripsPost', 'title', title)
            // verify required parameter 'description' is not null or undefined
            assertParamExists('apiTripsPost', 'description', description)
            // verify required parameter 'address' is not null or undefined
            assertParamExists('apiTripsPost', 'address', address)
            // verify required parameter 'latitude' is not null or undefined
            assertParamExists('apiTripsPost', 'latitude', latitude)
            // verify required parameter 'longitude' is not null or undefined
            assertParamExists('apiTripsPost', 'longitude', longitude)
            const localVarPath = `/api/trips`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


            if (image !== undefined) { 
                localVarFormParams.append('Image', image as any);
            }
    
            if (title !== undefined) { 
                localVarFormParams.append('Title', title as any);
            }
    
            if (description !== undefined) { 
                localVarFormParams.append('Description', description as any);
            }
    
            if (address !== undefined) { 
                localVarFormParams.append('Address', address as any);
            }
    
            if (latitude !== undefined) { 
                localVarFormParams.append('Latitude', latitude as any);
            }
    
            if (longitude !== undefined) { 
                localVarFormParams.append('Longitude', longitude as any);
            }
    
            if (typeId !== undefined) { 
                localVarFormParams.append('TypeId', typeId as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TripsApi - functional programming interface
 * @export
 */
export const TripsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TripsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Get filtered trips
         * @param {number} [tripType] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {string} [order] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {number} [geoHashPrecision] 
         * @param {boolean} [includeDeleted] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTripsGet(tripType?: number, search?: string, sort?: string, order?: string, page?: number, limit?: number, latitude?: number, longitude?: number, geoHashPrecision?: number, includeDeleted?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Trip>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTripsGet(tripType, search, sort, order, page, limit, latitude, longitude, geoHashPrecision, includeDeleted, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.apiTripsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete a trip
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTripsIdDelete(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<boolean>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTripsIdDelete(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.apiTripsIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get a trip
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTripsIdGet(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTripsIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.apiTripsIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary update a trip
         * @param {number} id 
         * @param {File} [image] 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [address] 
         * @param {string} [latitude] 
         * @param {string} [longitude] 
         * @param {number} [typeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTripsIdPut(id: number, image?: File, title?: string, description?: string, address?: string, latitude?: string, longitude?: string, typeId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTripsIdPut(id, image, title, description, address, latitude, longitude, typeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.apiTripsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new trip
         * @param {File} image 
         * @param {string} title 
         * @param {string} description 
         * @param {string} address 
         * @param {string} latitude 
         * @param {string} longitude 
         * @param {number} [typeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTripsPost(image: File, title: string, description: string, address: string, latitude: string, longitude: string, typeId?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TripResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTripsPost(image, title, description, address, latitude, longitude, typeId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TripsApi.apiTripsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TripsApi - factory interface
 * @export
 */
export const TripsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TripsApiFp(configuration)
    return {
        /**
         * 
         * @summary Get filtered trips
         * @param {number} [tripType] 
         * @param {string} [search] 
         * @param {string} [sort] 
         * @param {string} [order] 
         * @param {number} [page] 
         * @param {number} [limit] 
         * @param {number} [latitude] 
         * @param {number} [longitude] 
         * @param {number} [geoHashPrecision] 
         * @param {boolean} [includeDeleted] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripsGet(tripType?: number, search?: string, sort?: string, order?: string, page?: number, limit?: number, latitude?: number, longitude?: number, geoHashPrecision?: number, includeDeleted?: boolean, options?: any): AxiosPromise<Array<Trip>> {
            return localVarFp.apiTripsGet(tripType, search, sort, order, page, limit, latitude, longitude, geoHashPrecision, includeDeleted, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete a trip
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripsIdDelete(id: number, options?: any): AxiosPromise<boolean> {
            return localVarFp.apiTripsIdDelete(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get a trip
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripsIdGet(id: number, options?: any): AxiosPromise<TripResponse> {
            return localVarFp.apiTripsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update a trip
         * @param {number} id 
         * @param {File} [image] 
         * @param {string} [title] 
         * @param {string} [description] 
         * @param {string} [address] 
         * @param {string} [latitude] 
         * @param {string} [longitude] 
         * @param {number} [typeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripsIdPut(id: number, image?: File, title?: string, description?: string, address?: string, latitude?: string, longitude?: string, typeId?: number, options?: any): AxiosPromise<TripResponse> {
            return localVarFp.apiTripsIdPut(id, image, title, description, address, latitude, longitude, typeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new trip
         * @param {File} image 
         * @param {string} title 
         * @param {string} description 
         * @param {string} address 
         * @param {string} latitude 
         * @param {string} longitude 
         * @param {number} [typeId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTripsPost(image: File, title: string, description: string, address: string, latitude: string, longitude: string, typeId?: number, options?: any): AxiosPromise<TripResponse> {
            return localVarFp.apiTripsPost(image, title, description, address, latitude, longitude, typeId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TripsApi - object-oriented interface
 * @export
 * @class TripsApi
 * @extends {BaseAPI}
 */
export class TripsApi extends BaseAPI {
    /**
     * 
     * @summary Get filtered trips
     * @param {number} [tripType] 
     * @param {string} [search] 
     * @param {string} [sort] 
     * @param {string} [order] 
     * @param {number} [page] 
     * @param {number} [limit] 
     * @param {number} [latitude] 
     * @param {number} [longitude] 
     * @param {number} [geoHashPrecision] 
     * @param {boolean} [includeDeleted] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public apiTripsGet(tripType?: number, search?: string, sort?: string, order?: string, page?: number, limit?: number, latitude?: number, longitude?: number, geoHashPrecision?: number, includeDeleted?: boolean, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).apiTripsGet(tripType, search, sort, order, page, limit, latitude, longitude, geoHashPrecision, includeDeleted, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete a trip
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public apiTripsIdDelete(id: number, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).apiTripsIdDelete(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get a trip
     * @param {number} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public apiTripsIdGet(id: number, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).apiTripsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update a trip
     * @param {number} id 
     * @param {File} [image] 
     * @param {string} [title] 
     * @param {string} [description] 
     * @param {string} [address] 
     * @param {string} [latitude] 
     * @param {string} [longitude] 
     * @param {number} [typeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public apiTripsIdPut(id: number, image?: File, title?: string, description?: string, address?: string, latitude?: string, longitude?: string, typeId?: number, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).apiTripsIdPut(id, image, title, description, address, latitude, longitude, typeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new trip
     * @param {File} image 
     * @param {string} title 
     * @param {string} description 
     * @param {string} address 
     * @param {string} latitude 
     * @param {string} longitude 
     * @param {number} [typeId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TripsApi
     */
    public apiTripsPost(image: File, title: string, description: string, address: string, latitude: string, longitude: string, typeId?: number, options?: RawAxiosRequestConfig) {
        return TripsApiFp(this.configuration).apiTripsPost(image, title, description, address, latitude, longitude, typeId, options).then((request) => request(this.axios, this.basePath));
    }
}



